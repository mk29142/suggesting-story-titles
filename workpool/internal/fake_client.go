// Code generated by counterfeiter. DO NOT EDIT.
package internal

import (
	"sync"

	"github.com/mk29142/suggesting-story-titles/client"
	"github.com/mk29142/suggesting-story-titles/domain"
	"github.com/mk29142/suggesting-story-titles/workpool"
)

type FakeClient struct {
	LocationStub        func(domain.Metadata) (client.Location, error)
	locationMutex       sync.RWMutex
	locationArgsForCall []struct {
		arg1 domain.Metadata
	}
	locationReturns struct {
		result1 client.Location
		result2 error
	}
	locationReturnsOnCall map[int]struct {
		result1 client.Location
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClient) Location(arg1 domain.Metadata) (client.Location, error) {
	fake.locationMutex.Lock()
	ret, specificReturn := fake.locationReturnsOnCall[len(fake.locationArgsForCall)]
	fake.locationArgsForCall = append(fake.locationArgsForCall, struct {
		arg1 domain.Metadata
	}{arg1})
	stub := fake.LocationStub
	fakeReturns := fake.locationReturns
	fake.recordInvocation("Location", []interface{}{arg1})
	fake.locationMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) LocationCallCount() int {
	fake.locationMutex.RLock()
	defer fake.locationMutex.RUnlock()
	return len(fake.locationArgsForCall)
}

func (fake *FakeClient) LocationCalls(stub func(domain.Metadata) (client.Location, error)) {
	fake.locationMutex.Lock()
	defer fake.locationMutex.Unlock()
	fake.LocationStub = stub
}

func (fake *FakeClient) LocationArgsForCall(i int) domain.Metadata {
	fake.locationMutex.RLock()
	defer fake.locationMutex.RUnlock()
	argsForCall := fake.locationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) LocationReturns(result1 client.Location, result2 error) {
	fake.locationMutex.Lock()
	defer fake.locationMutex.Unlock()
	fake.LocationStub = nil
	fake.locationReturns = struct {
		result1 client.Location
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) LocationReturnsOnCall(i int, result1 client.Location, result2 error) {
	fake.locationMutex.Lock()
	defer fake.locationMutex.Unlock()
	fake.LocationStub = nil
	if fake.locationReturnsOnCall == nil {
		fake.locationReturnsOnCall = make(map[int]struct {
			result1 client.Location
			result2 error
		})
	}
	fake.locationReturnsOnCall[i] = struct {
		result1 client.Location
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.locationMutex.RLock()
	defer fake.locationMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ workpool.Client = new(FakeClient)
