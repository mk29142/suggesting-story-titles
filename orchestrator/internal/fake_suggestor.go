// Code generated by counterfeiter. DO NOT EDIT.
package internal

import (
	"sync"

	"github.com/mk29142/suggesting-story-titles/domain"
	"github.com/mk29142/suggesting-story-titles/orchestrator"
	"github.com/mk29142/suggesting-story-titles/service"
)

type FakeSuggestor struct {
	SuggestionsStub        func([]domain.Location) []service.Suggestion
	suggestionsMutex       sync.RWMutex
	suggestionsArgsForCall []struct {
		arg1 []domain.Location
	}
	suggestionsReturns struct {
		result1 []service.Suggestion
	}
	suggestionsReturnsOnCall map[int]struct {
		result1 []service.Suggestion
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSuggestor) Suggestions(arg1 []domain.Location) []service.Suggestion {
	var arg1Copy []domain.Location
	if arg1 != nil {
		arg1Copy = make([]domain.Location, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.suggestionsMutex.Lock()
	ret, specificReturn := fake.suggestionsReturnsOnCall[len(fake.suggestionsArgsForCall)]
	fake.suggestionsArgsForCall = append(fake.suggestionsArgsForCall, struct {
		arg1 []domain.Location
	}{arg1Copy})
	stub := fake.SuggestionsStub
	fakeReturns := fake.suggestionsReturns
	fake.recordInvocation("Suggestions", []interface{}{arg1Copy})
	fake.suggestionsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSuggestor) SuggestionsCallCount() int {
	fake.suggestionsMutex.RLock()
	defer fake.suggestionsMutex.RUnlock()
	return len(fake.suggestionsArgsForCall)
}

func (fake *FakeSuggestor) SuggestionsCalls(stub func([]domain.Location) []service.Suggestion) {
	fake.suggestionsMutex.Lock()
	defer fake.suggestionsMutex.Unlock()
	fake.SuggestionsStub = stub
}

func (fake *FakeSuggestor) SuggestionsArgsForCall(i int) []domain.Location {
	fake.suggestionsMutex.RLock()
	defer fake.suggestionsMutex.RUnlock()
	argsForCall := fake.suggestionsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSuggestor) SuggestionsReturns(result1 []service.Suggestion) {
	fake.suggestionsMutex.Lock()
	defer fake.suggestionsMutex.Unlock()
	fake.SuggestionsStub = nil
	fake.suggestionsReturns = struct {
		result1 []service.Suggestion
	}{result1}
}

func (fake *FakeSuggestor) SuggestionsReturnsOnCall(i int, result1 []service.Suggestion) {
	fake.suggestionsMutex.Lock()
	defer fake.suggestionsMutex.Unlock()
	fake.SuggestionsStub = nil
	if fake.suggestionsReturnsOnCall == nil {
		fake.suggestionsReturnsOnCall = make(map[int]struct {
			result1 []service.Suggestion
		})
	}
	fake.suggestionsReturnsOnCall[i] = struct {
		result1 []service.Suggestion
	}{result1}
}

func (fake *FakeSuggestor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.suggestionsMutex.RLock()
	defer fake.suggestionsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSuggestor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ orchestrator.Suggestor = new(FakeSuggestor)
